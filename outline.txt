Ladies and gentlemen here we fucking go again

This website is a photosharing site for the Zeta alpha chapter of Pi Kappa Phi run on google firebase

address: pikapp-photos.web.app

Design: Should follow NSS-STYLEGUIDE.MD and adapt color changes from the pikapp-landing site, which I will include in the repo. (specifically there are some gradients that I want to replicate)
all public files are stored in the /public folder
HTML, CSS, and JS, should be stored in the root of /public
all assets that are not photos (such as logos, icons, etc) should be stored in /public/assets. this includes the Pi Kappa Phi logo, clemson logo, and negative space logo

SITE STRUCTURE:
The site will have TWO pages:
1. Home page (index.html) - renders the album list/cards
2. Album view page (album.html) - dynamically renders content based on which album was clicked
When users click on an album, the URL should change to reflect the selected album (e.g., album.html?album=spring_formal_2024)

Empty state: If there are no albums yet, the home page should just show the black gradient background with the nav and footer. No special "no albums" messaging.

FILESYSTEM ARCHITECTURE:
Local development structure:
- /albums/ - Photo storage (NOT in /public, NOT committed to git, NOT deployed to Firebase)
  - /albums/[album-name]/ - Album directories containing photos
    - /albums/[album-name]/low/ - webP thumbnails (uploaded to nginx only)
    - /albums/[album-name]/full/ - Original fullsize photos (uploaded to nginx only)
- /public/ - Website files and metadata (committed to git, deployed to Firebase)
  - /public/index.html, album.html, CSS, JS - Website code
  - /public/albums.json - Manifest of all albums
  - /public/albums/[album-name].json - Metadata for each album (flat JSON files, no subdirectories)

Deployment structure:
- Firebase Hosting: /public/ directory (website code + manifest JSON files only, NO photos)
  - Includes: HTML, CSS, JS, albums.json, and data.json files
  - Excludes: Photo files (those are in /albums which is NOT in /public)
- nginx Server: /var/www/pikapp-photos/ (photos only, NO manifests)
  - /var/www/pikapp-photos/[album-name]/low/ - webP thumbnails
  - /var/www/pikapp-photos/[album-name]/full/ - Original photos

HYBRID ARCHITECTURE - Firebase + nginx:
- Firebase Hosting: Serves the website (HTML/CSS/JS) and manifest files (albums.json and data.json files)
- nginx Server (pikapp-photos.ct-42210.com): Stores and serves all photo files (/low and /full folders)

Photo storage structure on nginx server (pikapp-photos.ct-42210.com):
- Each album has its own folder: /[album-name]/
- Each album folder contains TWO subfolders: /low and /full
- the /low folder will contain webP optimized thumbnails of each photo, compressed and resized to 50% of the original width and height
  - These thumbnails are used for BOTH the grid display AND lightbox viewing (just expanded, not reloaded)
  - Accessed via: https://pikapp-photos.ct-42210.com/[album-name]/low/[photo-name].webp
- the /full folder will contain ONLY the original format files (JPG, PNG, etc.) for downloading
  - These are NOT loaded for viewing, only when user clicks download/share
  - Accessed via: https://pikapp-photos.ct-42210.com/[album-name]/full/[photo-name].jpg
  - IMPORTANT: /full should NEVER contain .webp files - only original formats (JPG, PNG, etc.)
  - This prevents redundant storage (original + full webP conversion)

Manifest files stored on Firebase Hosting:
- /public/albums.json: Lists all album names (generated by upload.sh)
- /public/albums/[album-name].json: Contains metadata for each album (flat structure, no subdirectories)
  - Album metadata: Name of the album, photographer name, date of upload, randomly chosen cover photo
  - Photos array with objects: [{"webp": "photo_1.webp", "ext": "jpg"}, ...]
    - "webp": filename in /low folder on nginx server, used for thumbnails AND lightbox viewing
    - "ext": original file extension, stored in /full folder on nginx server, used ONLY for downloads
  - NOTE: The JSON files do NOT contain full URLs, only filenames. The JavaScript will construct full nginx URLs when loading photos
Photo naming convention: all photos should be renamed to a snake_case version of the album name plus an index number (e.g., spring_formal_2024_1.jpg, spring_formal_2024_2.jpg). This ensures that photo names match across /low and /full folders. Do NOT keep original filenames.
Photo workflow:
  - Grid shows /low webP thumbnails
  - Lightbox expands the SAME /low webP (no new image loaded)
  - Download/share button provides /full original format for quality

NGINX SERVER CONFIGURATION:
Server address: pikapp-photos.ct-42210.com
Server port: 8081 (configured to coexist with Apache on port 80)
Server root directory: /var/www/pikapp-photos
Server user: pikapp-photos (dedicated system user - runs nginx)
Upload method: rsync via SSH (SSH key authentication)
Upload SSH user: root@pikapp-photos.ct-42210.com (uses existing njt-hpe-proliant root SSH key)

CORS configuration: nginx is configured to allow cross-origin requests from pikapp-photos.web.app
  - CORS headers in nginx config:
    - Access-Control-Allow-Origin: https://pikapp-photos.web.app
    - Access-Control-Allow-Methods: GET, OPTIONS
    - Access-Control-Allow-Headers: *
    - Access-Control-Max-Age: 86400

Directory structure on nginx server (/var/www/pikapp-photos):
  /[album-name]/low/  - webP thumbnails (50% size, quality 85)
  /[album-name]/full/ - Original fullsize photos (original format: JPG, PNG, etc.)

Nginx configuration files (stored in git repo):
  /server/nginx/nginx.conf - Main nginx configuration (runs as pikapp-photos user)
  /server/nginx/pikapp-photos.conf - Site-specific virtual host config
  /server/nginx/deploy.sh - Deployment script to apply configuration changes
  /server/README.md - Server setup and deployment documentation

Nginx features:
  - Gzip compression enabled for better performance
  - Browser caching (1 year for immutable photos)
  - Security headers (X-Frame-Options, X-Content-Type-Options, X-XSS-Protection)
  - Access logging: /var/log/nginx/pikapp-photos-access.log
  - Error logging: /var/log/nginx/pikapp-photos-error.log
  - Server tokens disabled (hides nginx version)
  - Directory indexing disabled
  - Hidden files denied

Cloudflare configuration:
  - Configure Cloudflare to route pikapp-photos.ct-42210.com traffic to port 8081
  - Can use Cloudflare Tunnel or port forwarding/proxy rules
  - SSL/HTTPS should be handled by Cloudflare (origin server uses HTTP on port 8081)

UPLOAD.SH SCRIPT:
Location: Project root directory
Version control: Should be committed to git

The upload.sh bash script will be run locally on my machine to prepare the photos for upload
This script will use ffmpeg for image processing (fastest and most reliable)

Photo processing workflow (LOCAL):
1. Original photos start in: /albums/[album-name]/ (in project root, NOT in /public/)
2. Script generates webP thumbnails (50% size) to: /albums/[album-name]/low/
3. Script copies original fullsize photos (in their original format) to: /albums/[album-name]/full/
   - CRITICAL: Only copy original format files (JPG, PNG, etc.) - do NOT generate webP conversions for /full/
   - This ensures we only store 2 versions per photo: original format + low webP (not 3 versions)
4. Script creates JSON file at: /public/albums/[album-name].json (this goes to Firebase)
5. Script deletes original photos from /albums/[album-name]/ root (leaving only /low and /full folders)
   Example after processing:
   - /albums/album1/low/ contains webP thumbnails (for nginx upload)
   - /albums/album1/full/ contains original photos (for nginx upload)
   - /public/albums/album1.json contains metadata (for Firebase deployment)

The script will:
- Scan for uninitialized albums (albums in /albums/ without a corresponding [album-name].json file in /public/albums/)
- For each uninitialized album found in /albums/, create the JSON file by receiving CLI input for the album name and photographer name. The "date" field will be the timestamp when the script is run
- Rename all photos in the album's root folder (/albums/[album-name]/) to snake_case based on the album name plus an index number (e.g., spring_formal_2024_1.jpg, spring_formal_2024_2.jpg)
- Generate webP thumbnails (50% of original width and height) and store them in /albums/[album-name]/low/
- Copy (not move) the original fullsize photos to /albums/[album-name]/full/ in their original format (JPG, PNG, etc.) without any conversion
  - NOTE: The script should NOT create full-size webP conversions - only copy the originals as-is
- Delete the original photos from /albums/[album-name]/ root after processing
- Randomly select one of the photos to be the cover photo and add it to the data.json file
- Include all photo filenames in the data.json "photos" array (as webP filenames for thumbnails)
- AFTER all image processing is complete, rename the album directory itself to a snake_case version of the album name (e.g., "Spring Formal 2024" folder becomes "spring_formal_2024")
- Create the JSON file at /public/albums/[album-name].json (for Firebase deployment)
- Generate/update the /public/albums.json manifest file listing all initialized albums
- Output a summary of all changes made
- ASK FOR CONFIRMATION before uploading photos to nginx server
- ASK FOR CONFIRMATION before pushing to git
- ASK FOR CONFIRMATION before deploying to Firebase
- Upload photos to nginx server (if confirmed):
  - Uses rsync to upload /albums/[album-name]/low/ to root@pikapp-photos.ct-42210.com:/var/www/pikapp-photos/[album-name]/low/
  - Uses rsync to upload /albums/[album-name]/full/ to root@pikapp-photos.ct-42210.com:/var/www/pikapp-photos/[album-name]/full/
  - Rsync flags: -avz --progress --delete --chown=pikapp-photos:pikapp-photos --chmod=D755,F644
  - Requires SSH key authentication for root user (uses existing njt-hpe-proliant SSH key)
- Push updates to git (if confirmed): commits the updated /public/albums.json and /public/albums/[album-name].json files
- Deploy to Firebase (if confirmed): deploys the website and manifest files to Firebase Hosting

RESET-ALBUM.SH SCRIPT:
Location: Project root directory
Version control: Should be committed to git

This script reverses the upload.sh process, converting a web-ready album back to its original state (just original photos in the root album directory). This makes it easier to change album details or add additional photos.

The script will:
- Prompt for which album to reset (or accept album name as command line argument)
- Move all photos from /albums/[album-name]/full/ back to /albums/[album-name]/ (root of album folder)
- Delete the /albums/[album-name]/low/ folder and all webP thumbnails
- Delete the /albums/[album-name]/full/ folder
- Delete the /public/albums/[album-name].json file
- The album directory is now reset to its original state: just the original photos in /albums/[album-name]/, ready to be re-processed by upload.sh if needed
- NOTE: This script does NOT delete photos from the nginx server - that must be done manually

WEBSITE DATA LOADING:
The website will read from /public/albums.json (hosted on Firebase) to get the list of available albums, then load each album's metadata from /public/albums/[album-name].json (also on Firebase). The JavaScript will construct full nginx URLs for loading photos:
- Thumbnails/lightbox: https://pikapp-photos.ct-42210.com/[album-name]/low/[photo-name].webp
- Downloads: https://pikapp-photos.ct-42210.com/[album-name]/full/[photo-name].[ext]
Albums are sorted from most recently uploaded to least recently uploaded based on the "date" field in the data.json file

Album cards should display ONLY the album name (no date shown separately, as the date will be included in the album name itself)
Album card design: Cover photo as the card background with the album name overlaid at the bottom

when a user clicks on an album, they will be taken to a gallery view of that album, displaying all the photos in that album as thumbnails in a FIXED GRID layout
there will be a lightbox feature using GLightbox (lightweight at 11KB gzipped, modern, actively maintained) that allows users to click on a thumbnail to view the expanded photo, with the following features:
- Swipe gestures on mobile for next/previous
- Keyboard arrow keys for next/previous
- Click outside the photo to close
- X button to close
- ESC key to close
- Navigation controls to move to the next/previous photo in the album
there will be a back button to return to the album list view (index.html)

Downloading photos:
On desktop: there will be a download button that triggers a download of the fullsize version of the photo from the /full folder
On mobile: implement a share button using the Web Share API (the native iOS/Android share sheet). This allows iOS users to save photos to their camera roll from the native share sheet. This will provide the fullsize version of the photo from the /full folder. Triggering a standard download works as a fallback for browsers that don't support Web Share API.

when scrolling through the album list or photo gallery, photos should lazy load to improve performance. Use the native loading="lazy" HTML attribute on all image tags as the primary lazy loading method (best performance with zero JavaScript overhead, ideal for free Firebase hosting). This is the recommended 2024-2025 best practice for image lazy loading.

There will be a super simple nav bar that includes:
- Pi Kappa Phi logo on the left (links back to home page / index.html)
- Button to the pikapp-landing site (pikapp-landing.web.app)

There will also be a super minimalistic footer, taken from the pikapp-landing site, which just says (designed by negative space software)

There will be no login or user authentication, this is a completely public site for viewing and downloading photos only
There will be no photo upload feature on the website, all uploads will be done through the upload.sh script locally by the admin
There will be no comments or likes feature, this is purely a photosharing site

The website must be fully responsive and work on both desktop and mobile devices
load all libraries from CDNs to minimize firebase hosting usage and improve load times
Use modern JavaScript (ES6+) and CSS3 features, I dont care about a safari browser from 2012
Do not address SEO yet, I will handle that later

CODING PRACTICES FOR CLAUDE:
Functions should be small and focused to complete a single task. Avoid large monolithic functions that do many things.
Seperate code among files as needed to keep things organized. For example, separate CSS into its own file, separate JS into its own file, etc.
in addition, seperate JS code into multiple files if it makes sense (e.g., one file for album list logic, another for album view logic, another for lightbox logic, etc)
Comment code thoroughly to explain logic and decisions, but be professional and concise in comments. when bug testing, do not leave debug comments in the final code
Use consistent naming conventions for variables, functions, files, etc. (e.g., camelCase for JS variables and functions, kebab-case for file names, etc)
All error handling should be handled gracefully but should provide exact error messages, so that I can debug issues easily. NO generic error messages like "An error occurred"
Ask questions when requirements are unclear or ambiguous, when a design/articaetcure decision is a critical point that changes the site in a fundimental way, or a specifc change is needed that is not covered in this outline.txt file
as we make changes to the codebase, make sure that we update this outline.txt file, as well as claude.md and any documentation with any new instructions or changes to existing instructions.
